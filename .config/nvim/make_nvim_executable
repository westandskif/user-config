#!/bin/bash

set -o nounset
set -o errexit

while (("$#")); do
    case "$1" in
    --executable-name)
        EXECUTABLE_NAME="$2"
        shift 2
        ;;
    --python-from-version)
        PYTHON_FROM_VERSION="$2"
        shift 2
        ;;
    --python-from-venv-path)
        PYTHON_FROM_VENV_PATH=$(realpath "$2")
        shift 2
        ;;
    --python-from-docker-image)
        PYTHON_FROM_DOCKER_IMAGE="$2"
        shift 2
        ;;

    --node-from-version)
        NODE_FROM_VERSION="$2"
        shift 2
        ;;
    --node-from-docker-image)
        NODE_FROM_DOCKER_IMAGE_PATH="$2"
        shift 2
        ;;

    --force)
        FORCE_REINSTALL=1
        shift 1
        ;;
    -* | --*=)
        echo "Error: Unsupported flag $1" >&2
        exit 1
        ;;
    *) # preserve positional arguments
        PARAMS="$PARAMS $1"
        shift
        ;;
    esac
done

XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"

NVIM_ROOT="$XDG_DATA_HOME/nvim"
NVIM_CONFIG="$XDG_CONFIG_HOME/nvim"


COMMON_HELPERS_DIR="$XDG_DATA_HOME/nvim-helpers/common"
HELPERS_DIR="$XDG_DATA_HOME/nvim-helpers/$EXECUTABLE_NAME"
EXECUTABLES_DIR_TO_EXPOSE="$HELPERS_DIR/executables_to_expose"
EXECUTABLE="$HELPERS_DIR/$EXECUTABLE_NAME"

rm -rf "$HELPERS_DIR"
mkdir -p "$HELPERS_DIR"
mkdir -p "$EXECUTABLES_DIR_TO_EXPOSE"

TAG_DIRS="$HELPERS_DIR/TAG_DIRS"
touch "$TAG_DIRS"

###############################
########### OUTPUTS ###########
###############################
# TAGS
TAG_DIRS="$HELPERS_DIR/TAG_DIRS"
touch "$TAG_DIRS"
# PYTHON
PYTHON_VERSION="$HELPERS_DIR/PYTHON_VERSION"
PYTHON_SITEPACKAGES="$HELPERS_DIR/PYTHON_SITEPACKAGES"
touch "$PYTHON_SITEPACKAGES"


echo "INSTALLING SYSTEM LIBRARIES"
sudo dnf install aspell ripgrep ctags fd-find curl fzf bat

# pyenv is not officially supported in Fedora 34
#   sudo dnf install zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel openssl-devel xz xz-devel libffi-devel
#   install manually
PYENV="$PYENV_ROOT/bin/pyenv"

# nvm is not officially supported in Fedora 34
# NVM="$NVM_DIR/bin/pyenv"

# universal-ctags are not officially supported in Fedora 34
#   sudo dnf copr enable jgoguen/universal-ctags
sudo dnf install universal-ctags


echo "LOOKING FOR PYTHON DEPENDENCIES"
python_script_get_version='import sys; print(sys.version.split()[0])'
python_script_get_sitepackages_paths='import sys; list(map(print, (p for p in sys.path if '"'"'site-packages'"'"' in p or '"'"'src'"'"' in p)))'
if [ ! -z ${PYTHON_FROM_VENV_PATH+x} ]; then
    $PYTHON_FROM_VENV_PATH/bin/python \
        -c "$python_script_get_version" \
        >"$PYTHON_VERSION"
    echo "IDENTIFIED PYTHON VERSION $(cat $PYTHON_VERSION)"
    sitepackages_paths=$($PYTHON_FROM_VENV_PATH/bin/python -c "$python_script_get_sitepackages_paths")
    echo "REUSING EXISTING PYTHON SITEPACKAGES $(cat $PYTHON_SITEPACKAGES)"
    echo "$sitepackages_paths" >> "$PYTHON_SITEPACKAGES"
    echo "$sitepackages_paths" >> "$TAG_DIRS"
fi
if [ ! -z ${PYTHON_FROM_DOCKER_IMAGE+x} ]; then
    docker run --rm \
        --entrypoint=bash "${PYTHON_FROM_DOCKER_IMAGE}" \
        -c "python -c \"${python_script_get_version}\"" \
        >"$PYTHON_VERSION"
    echo "IDENTIFIED PYTHON VERSION $(cat $PYTHON_VERSION)"
    docker_tmp_container=tmp_for_nvim
    docker rm -f $docker_tmp_container &>/dev/null || true

    sitepackages_paths=$(docker run \
        --name=${docker_tmp_container} \
        --entrypoint=bash "${PYTHON_FROM_DOCKER_IMAGE}" \
        -c "python -c \"${python_script_get_sitepackages_paths}\"")
    for _path in $sitepackages_paths; do
        __path="$HELPERS_DIR/python_from_docker/$(echo "$_path" | sed s%/%%g)"
        mkdir -p "$__path"
        docker cp "${docker_tmp_container}:${_path}/." "$__path"
        echo $__path >>"$PYTHON_SITEPACKAGES"
        echo $__path >>"$TAG_DIRS"
    done
    docker rm -f $docker_tmp_container || true
    echo "COPIED PYTHON SITEPACKAGES FROM DOCKER\n$(cat $PYTHON_SITEPACKAGES)"
fi
if [ ! -z "${PYTHON_FROM_VERSION+x}" ] && [ ! -e "$PYTHON_VERSION" ]; then
    echo "$PYTHON_FROM_VERSION" > "$PYTHON_VERSION"
fi
if [ -e "$PYTHON_VERSION" ]; then
    _python_version=$(cat $PYTHON_VERSION)
    CC=clang "$PYENV" install -s $_python_version
    "$PYENV" rehash
    PYTHON_PYENV_DIR=$($PYENV prefix $_python_version)
    VENV_DIR="$COMMON_HELPERS_DIR/nvim-$_python_version"

    if [[ ${FORCE_REINSTALL:-0} -eq 1 ]]; then
        echo "DROPPING NVIM PYTHON - $VENV_DIR"
        rm -rf $VENV_DIR
    fi

    if [[ ! -d "$VENV_DIR" ]]; then
        $PYTHON_PYENV_DIR/bin/pip install virtualenv
        $PYTHON_PYENV_DIR/bin/virtualenv \
            -p $PYTHON_PYENV_DIR/bin/python \
            $VENV_DIR
        echo "CREATED PYTHON VIRTUALENV $VENV_DIR"
    fi

    $VENV_DIR/bin/python -m pip install -U --no-cache-dir \
        python-lsp-server \
        isort \
        black \
        flake8 \
        pylint \
        autoflake
    strings=(
        "autoflake"
        "black"
        "flake8"
        "isort"
        "pyflakes"
        "pylint"
        "pylsp"
    )
    python_path=$(
        (
            $VENV_DIR/bin/python -c "$python_script_get_sitepackages_paths"
            cat "$PYTHON_SITEPACKAGES"
        ) | paste -sd ':'
    )
    for i in "${strings[@]}"; do
        _script="#!/bin/bash
set -o nounset
set -o errexit
if [[ "$i" == pylint ]] || [[ "$i" == pylsp ]]; then
    export PYTHONPATH=\"$python_path\"
fi
exec $VENV_DIR/bin/$i \"\$@\""
        printf "$_script" >"$EXECUTABLES_DIR_TO_EXPOSE/$i"
        chmod 0777 "$EXECUTABLES_DIR_TO_EXPOSE/$i"
    done
fi


echo "INSTALLING NVIM"
if [[ ! -d "$NVIM_ROOT/nvim-linux64" ]] || [[ ${FORCE_REINSTALL:-0} -eq 1 ]]; then
    mkdir -p "$NVIM_ROOT"
    tag_name=$(curl -s https://api.github.com/repos/neovim/neovim/releases/latest | jq -r ".tag_name")
    curl \
        -fLo \
        "$NVIM_ROOT/nvim-linux64.tar.gz" \
        https://github.com/neovim/neovim/releases/download/$tag_name/nvim-linux64.tar.gz
    tar -xzf "$NVIM_ROOT/nvim-linux64.tar.gz" -C "$NVIM_ROOT"
    rm "$NVIM_ROOT/nvim-linux64.tar.gz"

    curl -fLo \
        "$NVIM_ROOT/site/autoload/plug.vim" \
        --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi


echo "CREATING PROJECT NVIM EXECUTABLE"

export_path='export PATH="$PATH:'"$EXECUTABLES_DIR_TO_EXPOSE"'"'
export_tag_dirs='export TAG_DIRS="'"$(cat "$TAG_DIRS")"'"'

_script="#!/bin/bash
set -o nounset
set -o errexit

$export_path
$export_tag_dirs

export XDG_CONFIG_HOME=$XDG_CONFIG_HOME \\
    && export XDG_DATA_HOME=$XDG_DATA_HOME \\
    && exec $NVIM_ROOT/nvim-linux64/bin/nvim \"\$@\"\n"

    printf "$_script" > "$EXECUTABLE"
    chmod 0777 "$EXECUTABLE"

    echo "Installing nvim plugins"
    "$EXECUTABLE" --headless +PlugInstall +PlugUpgrade +qa

    sudo ln -sf "$EXECUTABLE" "/usr/local/bin/$EXECUTABLE_NAME"
